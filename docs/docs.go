// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import (
	"github.com/swaggo/swag"
	"html/template"
	"net/http"
	"time"
)

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/event": {
            "get": {
                "description": "Retrieve events from ClickHouse.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Get Events",
                "responses": {
                    "200": {
                        "description": "events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.Event"
                            }
                        }
                    },
                    "500": {
                        "description": "error getting events from ClickHouse",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert event into ClickHouse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Create"
                ],
                "summary": "Insert Event",
                "parameters": [
                    {
                        "description": "Event object to insert",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.Event"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "event inserted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/search": {
            "get": {
                "description": "Search for events in ClickHouse based on criteria.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Search Events",
                "parameters": [
                    {
                        "description": "Search criteria",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "events matching search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error parsing events from ClickHouse",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test": {
            "get": {
                "description": "Insert random test data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Test",
                "responses": {
                    "200": {
                        "description": "test data inserted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.Event": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "integer"
                },
                "eventTime": {
                    "type": "string"
                },
                "payload": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "controller.Request": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "integer"
                },
                "lower limit": {
                    "type": "string"
                },
                "upper limit": {
                    "type": "string"
                }
            }
        }
    }
}`

const (
	swaggerTemplate = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-standalone-preset.js"></script> -->
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-bundle.js"></script> -->
    <link rel="stylesheet" href="//unpkg.com/swagger-ui-dist@3/swagger-ui.css" />
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui.css" /> -->
	<style>
		body {
			margin: 0;
		}
	</style>
    <title>Swagger</title>
</head>
<body>
    <div id="swagger-ui"></div>
    <script>
        window.onload = function() {
          SwaggerUIBundle({
            url: "/static/swagger.json?{{.Time}}",
            dom_id: '#swagger-ui',
            presets: [
              SwaggerUIBundle.presets.apis,
              SwaggerUIStandalonePreset
            ],
            layout: "StandaloneLayout"
          })
        }
    </script>
</body>
</html>
`
)

func swaggerUI(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	tmpl, err := template.New("swagger").Parse(swaggerTemplate)
	if err != nil {
		return
	}
	err = tmpl.Execute(w, struct {
		Time int64
	}{
		Time: time.Now().Unix(),
	})
	if err != nil {
		return
	}
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
