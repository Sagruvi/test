// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "testproject/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *Repository) CreateEvent(ctx context.Context, event entity.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx
func (_m *Repository) GetEvent(ctx context.Context) ([]entity.Event, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 []entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Event, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTest provides a mock function with given fields:
func (_m *Repository) InsertTest() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InsertTest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogData provides a mock function with given fields: request
func (_m *Repository) LogData(request entity.Request) ([]entity.Event, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for LogData")
	}

	var r0 []entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Request) ([]entity.Event, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(entity.Request) []entity.Event); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
